import * as scenarios from '../../../core/test-scenarios';
import { createForceMoveTransaction } from '../TransactionGenerator';
import { Signature } from '../Signature';


describe('createForceMoveTransaction', () => {
  it("should generate a valid force move transaction", () => {
    const contractAddress = '0xDEADBEEF';
    const { proposeHex, acceptHex, acceptSig } = scenarios.standard;
    // TODO: Verify this is correct data for the transaction..
    const expectedData = '0xb9b19cb200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000440000000000000000000000000000000000000000000000000000000000000048000000000000000000000000000000000000000000000000000000000000004c000000000000000000000000000000000000000000000000000000000000001a00000000000000000000000001111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000005409ed021d9299bf6814279a6a1411a7e866a6310000000000000000000000006ecbe1db9ef729cbe972c83fb886247691fb6beb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001f5cafdccc1599ae1d89b67782e35207b00705758e1d33365035bda45562f966300000000000000000000000000000000000000000000000000000000000001c00000000000000000000000001111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000020000000000000000000000005409ed021d9299bf6814279a6a1411a7e866a6310000000000000000000000006ecbe1db9ef729cbe972c83fb886247691fb6beb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001f5cafdccc1599ae1d89b67782e35207b00705758e1d33365035bda45562f966300000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000015d2f39f46646ed26e78bc6c826e6b0fc0695608a75b202bc500cf7b4c7d69a63000000000000000000000000000000000000000000000000000000000000000169161dc1de78f647490f93e4c1b8444b1e47729b6dac2232d58489804a28f773';
    const transaction = createForceMoveTransaction(contractAddress, proposeHex, acceptHex, new Signature(acceptSig));
    expect(transaction.data).toEqual(expectedData);
    expect(transaction.to).toEqual(contractAddress);
  });
});